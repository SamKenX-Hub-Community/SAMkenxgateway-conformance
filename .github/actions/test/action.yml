# action.yml
name: "Gateway Conformance Tests"
description: "Runs the Gateway Conformance Tests"
inputs:
  gateway-url:
    description: "The URL of the Gateway to test"
    required: true
  json:
    description: "The path where the JSON report will be saved"
    required: true
    default: "report.json"
  xml:
    description: "The path where the jUnit XML report will be saved"
    required: false
  html:
    description: "The path where the HTML report will be saved"
    required: false
  markdown:
    description: "The path where the Markdown report will be saved"
    required: false
  is-subdomain:
    description: "Enable the test suite for subdomain gateways"
    required: false
runs:
  using: "composite"
  steps:
    - id: github
      uses: pl-strflt/docker-container-action/.github/actions/github@v1
    - id: generate-args
      name: Generate additional arguments
      shell: bash
      env:
        IS_SUBDOMAIN: ${{ inputs.is-subdomain }}
      run: |
        ARGS=""
        if [ "$IS_SUBDOMAIN" = "true" ]; then
          ARGS="$ARGS --is-subdomain"
        fi

        echo "args=${ARGS}" >> "$GITHUB_OUTPUT"
    - name: Run the test
      uses: pl-strflt/docker-container-action@v1
      env:
        GATEWAY_URL: ${{ inputs.gateway-url }}
        JSON: ${{ inputs.json }}
        ADDITIONAL_ARGS: ${{ steps.generate-args.outputs.args }}
      with:
        repository: ${{ steps.github.outputs.action_repository }}
        ref: ${{ steps.github.outputs.action_ref }}
        dockerfile: Dockerfile
        opts: --network=host
        args: test --gateway-url "$GATEWAY_URL" --json-output "$JSON" ${ADDITIONAL_ARGS}
    - name: Create the XML
      if: (inputs.xml || inputs.html || inputs.markdown) && (failure() || success())
      uses: pl-strflt/gotest-json-to-junit-xml@v1
      with:
        input: ${{ inputs.json }}
        output: ${{ inputs.xml }}
    - name: Create the HTML
      if: inputs.html && (failure() || success())
      uses: pl-strflt/junit-xml-to-html@v1
      with:
        mode: no-frames
        input: ${{ inputs.xml }}
        output: ${{ inputs.html }}
    - name: Create the HTML
      if: inputs.markdown && (failure() || success())
      uses: pl-strflt/junit-xml-to-html@v1
      with:
        mode: summary
        input: ${{ inputs.xml }}
        output: ${{ inputs.markdown }}
